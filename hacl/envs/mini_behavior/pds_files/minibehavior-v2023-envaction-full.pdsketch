(define
(domain minibehavior-v2023-envaction-full)
(:requirements :pdsketch-v2-1)

(:types
    robot item - object
    pose - vector[float32, 2]
    direction - vector[int64, 1]
    height - vector[float32, 1]
)

(:predicates
    (robot-holding ?r - robot ?o - item)
    (holding ?r - robot ?o - item)
    (pickable ?o - item)
    (toggleable ?o - item)
    (openable ?o - item)

    (empty-pose [return_type=pose, cacheable=false])
    (robot-pose [return_type=pose] ?r - robot)
    (robot-direction [return_type=direction] ?r - robot)
    (bottom [return_type=height, cacheable=false])
    (middle [return_type=height, cacheable=false])
    (top [return_type=height, cacheable=false])

    (facing [return_type=pose] ?p - pose ?d - direction)
    (direction-left [return_type=direction] ?d - direction)
    (direction-right [return_type=direction] ?d - direction)
)

(:feature item-pose [group="augmented"]
    :parameters (?o - item)
    :output (pose)
)

(:feature item-height [group="augmented"]
    :parameters (?o - item)
    :output (height)
)

(:feature item-image [group="augmented-input"]
    :parameters (?o - item)
    :output (vector[float32, 3])
)

(:feature item-type [group="augmented"]  ; box, door, etc.
    :parameters (?o - item)
    :output (vector[float32, 32])
    :expr (??f (item-image ?o))
)
(:feature item-color [group="augmented"]  ; color of the object
    :parameters (?o - item)
    :output (vector[float32, 32])
    :expr (??f (item-image ?o))
)
(:feature item-state [group="augmented"]  ; door is open
    :parameters (?o - item)
    :output (vector[float32, 32])
    :expr (??f (item-image ?o))
)

(:feature robot-feature [group="augmented-input"]
    :parameters (?r - robot)
    :output (vector[float32, 3])
)

(:feature item-feature [group="augmented-input"]
    :parameters (?o - item)
    :output (vector[float32, 6])
)

(:derived (is-facing ?p - pose ?d - direction ?t - pose)
    (equal (facing ?p ?d) ?t)
)
(:derived (hands-free ?r - robot)
    (not (exists (?o - item) (robot-holding ?r ?o)))
)
(:derived (pose-free ?p - pose)
    (not (exists (?o - item) (equal (item-pose ?o) ?p)))
)
(:derived (robot-facing [return_type=pose] ?r - robot)
    (facing (robot-pose ?r) (robot-direction ?r))
)
(:derived (robot-is-facing ?r - robot ?o - item)
    (is-facing (robot-pose ?r) (robot-direction ?r) (item-pose ?o))
)
(:derived (robot-facing-clear ?r - robot)
    (not (exists (?o - item) (robot-is-facing ?r ?o)))
)
;(:derived (nextto    [group="goal"] ?o - item ?t - item) (??f (item-pose ?o) (item-pose ?t)))
(:derived (nextto    [group="goal"] ?o - pose ?t - pose) (??f ?o ?t))
(:derived (ontop    [group="goal"] ?o - item ?t - item)
    (and 
        (equal (item-pose ?o) (item-pose ?t))
        (??f (item-height ?o) (item-height ?t))
        (not (equal (item-height ?o) (item-height ?t)))
    )
)

(:derived (inside    [group="goal"] ?o - item ?t - item)
    (and 
        (equal (item-pose ?o) (item-pose ?t))
        (equal (item-height ?o) (item-height ?t))
    )
)
(:derived (atSameLocation    [group="goal"] ?o - item ?t - item)
    (and 
        (equal (item-pose ?o) (item-pose ?t))
    )
)
;(:derived (onfloor    [group="goal"] ?o - item)
;    (and 
;        (equal (item-height ?o) (bottom))
;    )
;)

(:derived (has-seen [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-furniture  [group="goal"] ?o - item) (??f (item-type ?o)))

(:derived (is-printer  [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-table [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-package [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-shelf [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-book [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-hamburger [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-ashcan [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-countertop [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-plate [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-carton [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-collect [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-door [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-plywood [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-cabinet [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-box [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-sink [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-plant [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-bucket [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-tool [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-car [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-stove [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-marker [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-pan [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-electric_refrigerator [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-brush [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-teabag [group="goal"] ?o - item) (??f (item-type ?o)))
(:derived (is-teapot [group="goal"] ?o - item) (??f (item-type ?o)))

(:derived (toggleon [group="goal"] ?o - item) (??f (item-state ?o)))
(:derived (is-open [group="goal"] ?o - item) (??f (item-state ?o)))
(:derived (is-dusty [group="goal"] ?o - item) (??f (item-state ?o)))

(:action forward
    :parameters (?r - robot)
    :precondition (robot-facing-clear ?r)
    :effect (and
        (robot-pose::assign ?r (robot-facing ?r))
    )
)
(:action lturn
    :parameters (?r - robot)
    :precondition (and )
    :effect (and
        (robot-direction::assign ?r (direction-left (robot-direction ?r)))
    )
)
(:action rturn
    :parameters (?r - robot)
    :precondition (and )
    :effect (and
        (robot-direction::assign ?r (direction-right (robot-direction ?r)))
    )
)
(:action pickup_0
    :parameters (?r - robot ?o - item)
    :precondition (and
        (hands-free ?r)
        (robot-is-facing ?r ?o)
        (pickable ?o)
        (equal (item-height ?o) (bottom))
    )
    :effect (and
        +(robot-holding ?r ?o)
        (item-pose::assign ?o (empty-pose))
    )
)
(:action pickup_1
    :parameters (?r - robot ?o - item)
    :precondition (and
        (hands-free ?r)
        (robot-is-facing ?r ?o)
        (pickable ?o)
        (equal (item-height ?o) (middle))
    )
    :effect (and
        +(robot-holding ?r ?o)
        (item-pose::assign ?o (empty-pose))
    )
)
(:action pickup_2
    :parameters (?r - robot ?o - item)
    :precondition (and
        (hands-free ?r)
        (robot-is-facing ?r ?o)
        (pickable ?o)
        (equal (item-height ?o) (top))
    )
    :effect (and
        +(robot-holding ?r ?o)
        (item-pose::assign ?o (empty-pose))
    )
)
(:action drop_0
    :parameters (?r - robot ?o - item)
    :precondition (and
        (robot-holding ?r ?o)
        (pickable ?o)
        (not (exists (?t - item) (and (robot-is-facing ?r ?t) (equal (item-height ?t) (bottom) ) )))
    )
    :effect (and
        -(robot-holding ?r ?o)
        (item-pose::assign ?o (robot-facing ?r))
        (item-height::assign ?o (bottom))
    )
)
(:action drop_1
    :parameters (?r - robot ?o - item)
    :precondition (and
        (robot-holding ?r ?o)
        (pickable ?o)
        (not (exists (?t - item) (and (robot-is-facing ?r ?t) (equal (item-height ?t) (middle) ) )))
        (exists (?t - item) (and (robot-is-facing ?r ?t) (equal (item-height ?t) (bottom)  )))
    )
    :effect (and
        -(robot-holding ?r ?o)
        (item-pose::assign ?o (robot-facing ?r))
        (item-height::assign ?o (middle))
    )
)
(:action drop_2
    :parameters (?r - robot ?o - item)
    :precondition (and
        (robot-holding ?r ?o)
        (pickable ?o)
        (not (exists (?t - item) (and (robot-is-facing ?r ?t) (equal (item-height ?t) (top) ) )))
        (exists (?t - item) (and (robot-is-facing ?r ?t) (equal (item-height ?t) (middle)  )))
    )
    :effect (and
        -(robot-holding ?r ?o)
        (item-pose::assign ?o (robot-facing ?r))
        (item-height::assign ?o (top))
    )
)
(:action toggle
    :parameters (?r - robot ?o - item)
    :precondition (and
        (robot-is-facing ?r ?o)
        (toggleable ?o)
    )
    :effect (and
        (item-state::assign ?o (??f (item-type ?o) (item-color ?o) (item-state ?o)))
    )
)
(:action open
    :parameters (?r - robot ?o - item)
    :precondition (and
        (robot-is-facing ?r ?o)
        (openable ?o)
    )
    :effect (and
        (item-state::assign ?o (??f (item-type ?o) (item-color ?o) (item-state ?o)))
    )
)
(:action drop_in
    :parameters (?r - robot ?o - item)
    :precondition (and
        (robot-holding ?r ?o)
        (pickable ?o)
    )
    :effect (and
        -(robot-holding ?r ?o)
        (item-pose::assign ?o (robot-facing ?r))
    )
)
)
